import { useState } from 'react'
import { GetStaticProps } from 'next'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import { PageContainer, Heading } from '../components/common'
import { getProposalsForStages } from '../api/getProposalsForStages'
import { ProposalsByStage, allStages } from '../types'
import { useMediaQuery } from '../hooks/useMediaQuery'
import { StageList } from '../components/stages/StageList'

const DynamicStageWithProposals = dynamic(async () => {
  const { StageWithProposals } = await import('../components/stages/StageWithProposals')
  return StageWithProposals
})

const DynamicSearchBar = dynamic(async () => {
  const { SearchBar } = await import('../components/common/SearchBar')
  return SearchBar
})

interface Props {
  proposals: ProposalsByStage
}

export const getStaticProps: GetStaticProps = async () => {
  const proposals = await getProposalsForStages({
    stages: allStages,
    includeRepoDetails: true
  })

  return {
    props: { proposals },
    revalidate: 1 * 60 * 60 // Revalidate every once per hour
  }
}

export default function ProposalsPage({ proposals }: Props) {
  const [searchQuery, setSearchQuery] = useState('')
  const isMobile = useMediaQuery('(max-width: 768px)')
  const isDesktop = !isMobile && isMobile != null
  console.log({ isMobile })

  return (
    <>
      <Head>
        <title>EcmaScript Proposals</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageContainer
        layout="column"
        gap="3rem"
        width="100%"
        mobileWidth="90%"
        margin="0 auto"
      >
        {isDesktop ? (
          <DynamicSearchBar
            searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}
            placeholder="Search for proposals..."
            hideOnMobile
            width="50rem"
          />
        ) : null}
        {isMobile ? (
          <>
            <Heading margin="0">Stages</Heading>
            <StageList stages={allStages.slice().reverse()} />
          </>
        ) : isDesktop ? (
          allStages.map((stage) => (
            <DynamicStageWithProposals
              key={stage}
              stage={stage}
              proposals={proposals[stage]}
              searchQuery={searchQuery}
            />
          ))
        ) : null}
      </PageContainer>
    </>
  )
}
